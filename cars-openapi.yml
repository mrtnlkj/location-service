openapi: 3.0.2
info:
  title: API template
  version: "3.4.0+20210630064200"
  x-logo:
    url: ""
  contact:
    email: "api-support@scheidt-bachmann.sk"
    name: API-support

  description: |-
    This OpenAPI specification serves as a Template for microservice API documentation.

    It describes what are mandatory parts of the documentation with examples.

    It is intended to showcase possibilities of the OpenAPI specification so it can be re-used.

    OAS specification has to be in YAML format.

    **Validation tools currently support OAS version 3.0.2**, therefore OAS has to be compliant to this OAS version.

    <h2>Well described API has:</h2>
      - API has defined 5xxx MSAPI number in summary
      - API has defined **operationId** - please refer to the existing operationId in the master API table in Google Sheets to ensure you use a unique identifier for this purpose
      - API has short summary of what the API call is doing as a benefit to the API consumer (end user)
      - API has defined Tags for grouping of functionalities - please refer to the global Tags table to ensure you use a unique identifier
      - API has **detailed** and understandable description for API consumer **user of the API** and not an MSAPI developer.  _This must be directed towards someone who may not be fully technical with the platform as a whole, therefore more is better than less even describing what the resource is within the context of the wider system_
        - No one can understnd API without description (e.g., *The endpoint receives a create order request...* has no added value for the consumer of the API)
        - If the API is a single call within a sequence of calls, then the sequence of calls has to be described
          - see: "5801 - Register new Car" API
        - It has to be clear which step of the flow current API is.
      - Uses $refs to components by default where relevant
      - If different RBAC results in different results being returned then please describe that fully using named examples
      - Empty arrays on list views should always return a 200 response and not a 404 response
      - API is validated using Stoplight, swagger-cli and swagger-code-generator so must pass these validators before publishing

      <h3>Request</h3>
      <h4>Parameters</h4>
      - All parameters (path, query, header) must have a summary and a description described, to be as clear as possible
        - All parameters have all possible values defined: schema/type/pattern/enum...
        - All parameters has **named** examples for every use-case or combination of input parameters

      <h4>Request body</h4>
      - Request body has all schemas fully described in the description as to the purpose of the request data that is being presented
        - All attributes are described, to be as clear as possible
        - All attributes has defined possible values: schema/type/pattern/enum...
        - All attributes has example values
      - Request body has **named** examples for every use-case or combination of input data

      <h3>Response</h3>
      <h4>Status codes</h4>
      - **All** available status codes are present and described, also describe when and why error cases are triggered

      <h4>Headers</h4>
      - All relevant response headers are present and fully described in the description
      - All mentioned headers have example value

      <h4>Response body</h4>
      - Response body has defined schema for **all status codes**
        - All attributes are described, to be as clear as possible
        - All attributes has defined possible values: schema/type/pattern/enum...
        - All attributes has example values
      - Response body has **named** examples for every use-case and/or combination of output data

      <h4>Error Response</h4>
      - ALL Error responses has to be compliant with common Error response schema
        - Schemas/**ErrorResponse** object should be used: 
          - **errorMessage** (mandatory)  - Provides general error message and reference Id for further investigation.
            - errorMessage.referenceId - 25 characters string generated by system for internal investigation.
            - errorMessage.message - High level description string of error message.
          - **businessExceptions** (optional)  - Shows a list of exception(s) related to business rule.
            - businessExceptions[ ].code - Error code string. It should consist of 3 characters following with 4 digit(s) number. The first 3 characters represent different modules.
            - businessExceptions[ ].message - Detailed string description of error message related to business rule.
          - **fieldValidations** (optional)  - Shows a list of field validation(s).
            - fieldValidations[ ].field  - String field name that violates the validation rule.
            - fieldValidations[ ].message  - Detailed description string  of validation rule.
        - see: Schemas/ErrorResponse for more

      <h3>Schemas</h3>
      - Request/Response body has defined schemas and are referenced and reused where possible
        - Schemas has descriptive and understandable naming-convention
        - The same schemas have to be used for the same resource
        - If API supports multiple schemas (e.g.: different response per mediumType) All has to be described
          - see: Sport-race and Truck-race schemas
        - Naming conventions use the global naming conventions described in the Master API document on Google Sheets
      - Parameters are described in components/parameters section of OpenAPI definition file nad referenced

paths:
  /api/v4/cars:
    post:
      tags:
        - Cars

      operationId: register_new_car

      summary: 5801 - Register new Car
      description: |-
        This API allows a new car to be registered within the system using the provided input data.

        Cars are the core components used within the race circuit.

        In order to drive on the race circuit you must be a registered driver of a registered car within the system.

        Cars cannot be removed from the system after they have been registered as they may have taken part in a race.

        Registered can be Sport-race cars and Truck-race cars.

      security:
        - OAuthAuthorization:
            - default

      requestBody:
        required: true
        content:
          application/json:
            schema:
              ### Car object in Sport-race deployment has different set of brands than in Truck-race, such behaviour can be described using multiple schemas
              oneOf:
                - $ref: "#/components/schemas/SportRaceCar"
                - $ref: "#/components/schemas/TruckRaceCar"
            examples:
              "Register car - Sport-race":
                value:
                  vin: 4Y1SL65848Z411439
                  type: Coupe
                  brand: Ford

              "Register car - Truck-race":
                value:
                  vin: WP0ZZZ99ZTS392124
                  type: Garbage
                  brand: DAF

      responses:
        "201":
          description: A new Car object has successfully been registered
          content:
            application/json:
              schema:
                ### Car object in Sport-race deployment has different set of brands than in Truck-race, such behaviour can be described using multiple schemas
                oneOf:
                  - $ref: "#/components/schemas/SportRaceCar"
                  - $ref: "#/components/schemas/TruckRaceCar"
              examples:
                "Car - Sport-race":
                  value:
                    vin: 4Y1SL65848Z411439
                    type: Coupe
                    brand: Ford

                "Car - Truck-race":
                  value:
                    vin: WP0ZZZ99ZTS392124
                    type: Garbage
                    brand: DAF

        "400":
          description: This code is returned when the request is missing mandatory parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                "Missing mandatory attribute":
                  value:
                    errorMessage:
                      referenceId: CAR-jfuwLGfse7JeXy03RrElt
                      message: Input validation failed
                    businessExceptions:
                      - code: CAR0001
                        message: vin validation issue
                    fieldValidations:
                      - field: vin
                        message: >-
                          missing mandatory attribute

                "Invalid input parameter":
                  value:
                    errorMessage:
                      referenceId: CAR-ncyaFSgeg8JbYx7lV7Wnt
                      message: Input validation failed
                    businessExceptions:
                      - code: CAR0002
                        message: vin validation issue
                    fieldValidations:
                      - field: vin
                        message: >-
                          does not have a minimum length of 17 characters

    get:
      tags:
        - Cars

      operationId: get_cars

      summary: 5803 - Get List of Cars
      description: |-
        Returns a list of Car objects that have been registered in the system.

        You can pass in certain query paramters as shown to refine your search criteria.

        API is rate-limited. Limit is provided in *X-RateLimit-Limit* response header

      security:
        - OAuthAuthorization:
            - default

      parameters:
        - $ref: "#/components/parameters/vinQueryParam"

        - name: fromDate
          in: query
          description: Query only Car objects that were registered after specified date, can be combined with toDate.
          required: false
          deprecated: false
          example: "2017-07-21T17:32:28Z"
          schema:
            type: string
            format: date-time

        - name: toDate
          in: query
          description: Query only Cars that were registered before specified date, can be combined with toDate.
          required: false
          deprecated: false
          example: "2017-07-21T17:32:28Z"
          schema:
            type: string
            format: date-time

        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"

        - name: X-FullView
          in: header
          description: Specifies if returned Cars should contain all details.
          required: false
          deprecated: false
          example: true
          schema:
            type: boolean
            default: false

      responses:
        "200":
          description: |-
            Returns a list of all Car objects that may be filtered by additional query paramters.

            As a Competition Owner all Cars within the system will be returned.

            As a Driver or Team Owner, Cars returned will always be ones that you either registered within the system or have been registered as a driver within a race. Cars that you have not owned will not be returned within the results, regardless of the query paramters used.

          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
                minimum: 1
                maximum: 10000
              description: Request limit per hour.
              example: 5000

          content:
            application/json:
              schema:
                type: object
                properties:
                  cars:
                    type: array
                    items:
                      ### Car object in Sport-race deployment has different set of brands than in Truck-race, such behaviour can be described using multiple schemas
                      oneOf:
                        - $ref: "#/components/schemas/SportRaceCar"
                        - $ref: "#/components/schemas/TruckRaceCar"

              examples:
                "Car - Sport-race":
                  value:
                    cars:
                      - vin: 4Y1SL65848Z411439
                        type: Coupe
                        brand: Ford

                "Car - Truck-race":
                  value:
                    cars:
                      - vin: WP0ZZZ99ZTS392124
                        type: Garbage
                        brand: DAF

                "Multiple Cars - Truck-race":
                  value:
                    cars:
                      - vin: WP0ZZZ99ZTS392124
                        type: Garbage
                        brand: DAF

                      - vin: 4Y1SL65848Z411439
                        type: Flatbed
                        brand: Volvo

                      - vin: 4T3ZK3BB7BU042861
                        type: Flatbed
                        brand: MAN

                "Cars Not Found":
                  value:
                    cars: []

    patch:
      tags:
        - Cars

      operationId: update_registered_car

      summary: 5804 - Update registered Car
      description: |-
        Updates an existing Car object with provided input data within the request body.

        This can only be done by the Competition Owner, registered Driver of the Car, or Team Owner of the Car.

      security:
        - OAuthAuthorization:
            - default

      requestBody:
        # To define multiple possible schemas to be used, it is possible to use following OpenAPI construct: https://swagger.io/docs/specification/data-models/oneof-anyof-allof-not/
        required: true
        content:
          application/json:
            schema:
              ### Car object in Sport-race deployment has different set of brands than in Truck-race, such behaviour can be described using multiple schemas
              oneOf:
                - $ref: "#/components/schemas/SportRaceCar"
                - $ref: "#/components/schemas/TruckRaceCar"

            examples:
              "Update Car - Sport-race":
                value:
                  vin: 4Y1SL65848Z411439
                  type: Coupe
                  brand: Ford

              "Update Car - Truck-race":
                value:
                  vin: 4T3ZK3BB7BU042861
                  type: Flatbed
                  brand: MAN

      responses:
        "200":
          description: |-
            The Car object has successfully been updated.

            Returns a complete Car object with the updates applied.
          content:
            application/json:
              schema:
                ### Car object in Sport-race deployment has different set of brands than in Truck-race, such behaviour can be described using multiple schemas
                oneOf:
                  - $ref: "#/components/schemas/SportRaceCar"
                  - $ref: "#/components/schemas/TruckRaceCar"
              examples:
                "Car - Sport-race":
                  value:
                    vin: 4Y1SL65848Z411439
                    type: Coupe
                    brand: Ford

                "Car - Truck-race":
                  value:
                    vin: 4T3ZK3BB7BU042861
                    type: Flatbed
                    brand: MAN

        "400":
          description: Mssing mandatory parametes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                "Missing mandatory attribute":
                  value:
                    errorMessage:
                      referenceId: CAR-jfuwLGfse7JeXy03RrElt
                      message: Input validation failed
                    businessExceptions:
                      - code: CAR0001
                        message: vin validation issue
                    fieldValidations:
                      - field: vin
                        message: >-
                          missing mandatory attribute

                "Invalid input parameter":
                  value:
                    errorMessage:
                      referenceId: CAR-ncyaFSgeg8JbYx7lV7Wnt
                      message: Input validation failed
                    businessExceptions:
                      - code: CAR0002
                        message: vin validation issue
                    fieldValidations:
                      - field: vin
                        message: >-
                          does not have a minimum length of 17 characters

  /api/v4/cars/{VIN}:
    get:
      tags:
        - Cars

      operationId: get_single_registered_car

      summary: 5802 - Get single Car by Vehicle Identification Number
      description: |-
        Returns single Car object registered in the system for provided VIN(Vehicle Indetification Number) with defined embeded fields by query parameters

        API is rate-limited. Limit is provided in *X-RateLimit-Limit* response header
      security:
        - OAuthAuthorization:
            - default

      parameters:
        - name: VIN
          in: path
          description: Vehicle Identification Number
          required: true
          deprecated: false
          examples:
            VIN:
              value: 4Y1SL65848Z411439
          schema:
            maxLength: 17
            minLength: 17
            type: string
            example: 4Y1SL65848Z411439

        - name: embed
          in: query
          description: |-
            Specifies fields that will be embeded in response object.

            Multiple values can be selected.

            Every field will be added as a new query parameter.
          required: false
          deprecated: false
          examples:
            Simple:
              value: []
            Full:
              value:
                - brand
                - type
          explode: true
          schema:
            type: array
            items:
              enum:
                - type
                - brand
            example:
              - type

      responses:
        "200":
          description: Car object returned with defined embeded fields by query parameters
          headers:
            X-RateLimit-Limit:
              schema:
                type: integer
                minimum: 1
                maximum: 10000
              description: Request limit per hour.
              example: 1000

          content:
            application/json:
              schema:
                ### Car object in Sport-race deployment has different set of brands than in Truck-race, such behaviour can be described using multiple schemas
                oneOf:
                  - $ref: "#/components/schemas/SportRaceCar"
                  - $ref: "#/components/schemas/TruckRaceCar"
              examples:
                "Car - Sport-race":
                  value:
                    vin: 4Y1SL65848Z411439
                    type: Coupe
                    brand: Ford

                "Car - Truck-race":
                  value:
                    vin: 4T3ZK3BB7BU042861
                    type: Flatbed
                    brand: MAN

        "400":
          description: Missing mandatory parametes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                "Invalid input parameter":
                  value:
                    errorMessage:
                      referenceId: CAR-ncyaFSgeg8JbYx7lV7Wnt
                      message: Input validation failed
                    businessExceptions:
                      - code: CAR0002
                        message: vin validation issue
                    fieldValidations:
                      - field: vin
                        message: >-
                          does not have a minimum length of 17 characters

components:
  schemas:
    SportRaceCar:
      title: Car object for Sport-race
      required:
        - vin
      type: object
      properties:
        vin:
          type: string
          description: Vehicle Identification Number
          maxLength: 17
          minLength: 17
          example: 4Y1SL65848Z411439
        brand:
          type: string
          description: Brand of the Car to be registered
          enum:
            - Ford
            - Peugeot
            - Opel
          example: Opel
        type:
          type: string
          description: Type of the Car to be registered
          enum:
            - Coupe
            - Sedan
          example: Coupe

    TruckRaceCar:
      title: Car object for Truck-race
      required:
        - vin
      type: object
      properties:
        vin:
          type: string
          description: Vehicle Identification Number
          maxLength: 17
          minLength: 17
          example: 4Y1SL65848Z411439
        brand:
          type: string
          description: Brand of the Car to be registered
          enum:
            - DAF
            - Volvo
            - MAN
          example: MAN
        type:
          type: string
          description: Type of the Car to be registered
          enum:
            - Flatbed
            - Garbage
          example: Flatbed

    ErrorResponse:
      description: Error response generic structure
      type: object
      properties:
        errorMessage:
          $ref: "#/components/schemas/ErrorMessage"
        businessExceptions:
          type: array
          description: List of business exceptions
          items:
            $ref: "#/components/schemas/BusinessException"
        fieldValidations:
          type: array
          description: List of field validations
          items:
            $ref: "#/components/schemas/FieldValidation"
    ErrorMessage:
      type: object
      description: Provides general error message and reference Id for further investigation.
      required:
        - message
      properties:
        message:
          type: string
          description:  High level description of error message.
          example: Input validation failed
        referenceId:
          type: string
          description: Generated by system for internal investigation.
          maxLength: 25
          example: CAR-jfuwLGfse7JeXy03RrElt
    BusinessException:
      type: object
      properties:
        code:
          type: string
          description: Error code that should consist of 3 characters following with 4 digit(s) number. The first 3 characters represent different modules.
          example: CAR0001
        message:
          type: string
          description: Detailed description of error message related to business rule.
          example: vin validation issue
    FieldValidation:
      type: object
      properties:
        field:
          type: string
          description: Field name that violates the validation rule
          example: vin
        message:
          type: string
          description: Detailed description of validation rule
          example: "missing mandatory attribute"

  securitySchemes:
    OAuthAuthorization:
      type: oauth2
      description: >
        API security used for securing machine-to-machine communication using the
        OAuth2.0 protocol <BR>
        For now users will *not be* authorized with OAuth2.0
      flows:
        clientCredentials:
          tokenUrl: /auth/oauth2/token
          scopes:
            default: Full access to all APIs

  parameters:
    offsetParam: # Can be referenced via '#/components/parameters/offsetParam'
      name: offset
      in: query
      description: Number of items to skip before returning the results.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0

    limitParam: # Can be referenced as '#/components/parameters/limitParam'
      name: limit
      in: query
      description: Maximum number of items to return.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20

    vinQueryParam: # Can be referenced as '#/components/parameters/vinQueryParam'
      name: vin
      in: query
      description: Vehicle Identification Number
      required: false
      deprecated: false
      example: 4Y1SL65848Z411439
      schema:
        maxLength: 17
        minLength: 17
        type: string

tags:
  - name: Cars
    description: "Operations with Car resources"

servers:
  - url: https://api.scheidt-bachmann.sk
    description: ""
    variables: {}
    x-last-modified: 1624963132554

security:
  - OAuthAuthorization: []
